//
//  MemoryViewController.swift
//  firstapp
//
//  Created by Anthony Rubin on 10/11/17.
//  Copyright Â© 2017 rubin. All rights reserved.
//

import UIKit; import AVFoundation
import StoreKit

enum Colors {
    
    static let red = UIColor(red: 1.0, green: 0.0, blue: 77.0/255.0, alpha: 1.0)
    static let blue = UIColor.blue
    static let green = UIColor(red: 35.0/255.0 , green: 233/255, blue: 173/255.0, alpha: 1.0)
    static let yellow = UIColor(red: 1, green: 209/255, blue: 77.0/255.0, alpha: 1.0)
    
}

enum Images {
    
    static let box = UIImage(named: "Box")!
    static let triangle = UIImage(named: "Triangle")!
    static let circle = UIImage(named: "Circle")!
    static let swirl = UIImage(named: "Spiral")!
    
}

class MemoryViewController: UIViewController, UIGestureRecognizerDelegate, isOnProtocol{
    var sstring = String()
    var player: AVAudioPlayer?
    var returnToImage = Int()
     var emitter = CAEmitterLayer()
    //item list to be used by the imageTapped function
    var newItemList:[Card] = []
    var universalImage = UIImage()
    var universalInt = Int()
     var dissappear = 0
    var colors:[UIColor] = [
        Colors.red,
        Colors.blue,
        Colors.green,
        Colors.yellow
    ]
    var images:[UIImage] = [
        Images.box,
        Images.triangle,
        Images.circle,
        Images.swirl
    ]
    var velocities:[Int] = [
        100,
        90,
        150,
        200
    ]
    
    
    @IBOutlet weak var buttonStack: UIStackView!
    @IBOutlet weak var playAgain: UIButton!
   
    @IBOutlet weak var xbutton: UIButton!
    @IBOutlet weak var returnButton: UIButton!
    @IBOutlet weak var homeAndXbutton: UIButton!
    @IBOutlet weak var memoryGameReset: UIImageView!
    @IBOutlet weak var R1C1: UIImageView!
    @IBOutlet weak var R1C2: UIImageView!
    @IBOutlet weak var R1C3: UIImageView!
    @IBOutlet weak var R1C4: UIImageView!
    @IBOutlet weak var R2C1: UIImageView!
    @IBOutlet weak var R2C2: UIImageView!
    @IBOutlet weak var R2C3: UIImageView!
    @IBOutlet weak var R2C4: UIImageView!
    @IBOutlet weak var R3C1: UIImageView!
    @IBOutlet weak var R3C2: UIImageView!
    @IBOutlet weak var R3C3: UIImageView!
    @IBOutlet weak var R3C4: UIImageView!
    @IBOutlet weak var R4C1: UIImageView!
    @IBOutlet weak var R4C2: UIImageView!
    @IBOutlet weak var R4C3: UIImageView!
    @IBOutlet weak var R4C4: UIImageView!
    
    var outletArray: [UIImageView] = []
    //random # used for random memory card backing
    let random = Int(arc4random_uniform(4))
   
    //count used to keep track of how many cards have been revealed
    var count = 0
    
    let m = memoryCard(cardIsRevealed: false, dissapear: false, sound: "")
    //matrix of memoryCard structs
    
    var memoryArray: [[memoryCard]] = [[]]

  func cardBacking() -> UIImage{
        var result: UIImage
        if random == 1{
           result = #imageLiteral(resourceName: "memback1")
        }else if random == 2{
            result = #imageLiteral(resourceName: "memback2")
        }else if random == 3{
            result = #imageLiteral(resourceName: "memback3")
        }else{
            result = #imageLiteral(resourceName: "memback4")
        }
    return result
    }
    
    
    override func viewDidLoad() {
        super.viewDidLoad()

        loadCards()
    let tapGestureRecognizer = UITapGestureRecognizer(target: self, action: #selector(imageTapped(tapGestureRecognizer:)))
   R1C1.addGestureRecognizer(tapGestureRecognizer)
    
    let tapGestureRecognizer2 = UITapGestureRecognizer(target: self, action: #selector(imageTapped2(tapGestureRecognizer:)))
    R1C2.addGestureRecognizer(tapGestureRecognizer2)
    
    let tapGestureRecognizer3 = UITapGestureRecognizer(target: self, action: #selector(imageTapped3(tapGestureRecognizer:)))
        R1C3.addGestureRecognizer(tapGestureRecognizer3)
        
        let tapGestureRecognizer4 = UITapGestureRecognizer(target: self, action: #selector(imageTapped4(tapGestureRecognizer:)))
        R1C4.addGestureRecognizer(tapGestureRecognizer4)
        
        let tapGestureRecognizer5 = UITapGestureRecognizer(target: self, action: #selector(imageTapped5(tapGestureRecognizer:)))
        R2C1.addGestureRecognizer(tapGestureRecognizer5)
        
        let tapGestureRecognizer6 = UITapGestureRecognizer(target: self, action: #selector(imageTapped6(tapGestureRecognizer:)))
        R2C2.addGestureRecognizer(tapGestureRecognizer6)
        
        let tapGestureRecognizer7 = UITapGestureRecognizer(target: self, action: #selector(imageTapped7(tapGestureRecognizer:)))
        R2C3.addGestureRecognizer(tapGestureRecognizer7)
        
        let tapGestureRecognizer8 = UITapGestureRecognizer(target: self, action: #selector(imageTapped8(tapGestureRecognizer:)))
        R2C4.addGestureRecognizer(tapGestureRecognizer8)
        
        let tapGestureRecognizer9 = UITapGestureRecognizer(target: self, action: #selector(imageTapped9(tapGestureRecognizer:)))
        R3C1.addGestureRecognizer(tapGestureRecognizer9)
        
        let tapGestureRecognizer10 = UITapGestureRecognizer(target: self, action: #selector(imageTapped10(tapGestureRecognizer:)))
        R3C2.addGestureRecognizer(tapGestureRecognizer10)
        
        let tapGestureRecognizer11 = UITapGestureRecognizer(target: self, action: #selector(imageTapped11(tapGestureRecognizer:)))
        R3C3.addGestureRecognizer(tapGestureRecognizer11)
        
        let tapGestureRecognizer12 = UITapGestureRecognizer(target: self, action: #selector(imageTapped12(tapGestureRecognizer:)))
        R3C4.addGestureRecognizer(tapGestureRecognizer12)
        
        let tapGestureRecognizer13 = UITapGestureRecognizer(target: self, action: #selector(imageTapped13(tapGestureRecognizer:)))
        R4C1.addGestureRecognizer(tapGestureRecognizer13)
        
        let tapGestureRecognizer14 = UITapGestureRecognizer(target: self, action: #selector(imageTapped14(tapGestureRecognizer:)))
        R4C2.addGestureRecognizer(tapGestureRecognizer14)
        
        let tapGestureRecognizer15 = UITapGestureRecognizer(target: self, action: #selector(imageTapped15(tapGestureRecognizer:)))
        R4C3.addGestureRecognizer(tapGestureRecognizer15)
        
        let tapGestureRecognizer16 = UITapGestureRecognizer(target: self, action: #selector(imageTapped16(tapGestureRecognizer:)))
        R4C4.addGestureRecognizer(tapGestureRecognizer16)
     
        //end viewDidLoad method
    }
    
    func loadCards(){
        xbutton.isUserInteractionEnabled = false
        xbutton.setImage(nil, for: .normal)
        dissappear = 0
        var itemList:[Card] = []
        newItemList = []
        playAgain.isHidden = true
        returnButton.isHidden = true
        homeAndXbutton.addTarget(self, action:#selector(home(_:)), for: .touchUpInside)
        
        memoryArray = [[m,m,m,m],[m,m,m,m],[m,m,m,m],[m,m,m,m]]
        outletArray = [R1C1, R1C2, R1C3, R1C4, R2C1, R2C2, R2C3, R2C4, R3C1, R3C2, R3C3, R3C4, R4C1, R4C2, R4C3, R4C4]
        
        for i in 0..<outletArray.count {
           outletArray[i].contentMode = UIViewContentMode.scaleToFill
            outletArray[i].isUserInteractionEnabled = true
            
        }
        func addlist(list:[String])
        {
            for word in list
            {
                itemList.append(Card(image: word))
            }
        }

        for i in 0..<outletArray.count{
            outletArray[i].image = cardBacking()
        }
 
        for i in 0..<9 {
            let list: [String]
            switch i {
            case 0: list = ["shadow", "shark", "sharp", "shave", "sheep", "sheet", "ship", "shoot", "shop", "shot", "shout"]
            case 1: list = ["fishing", "lotion", "machine", "parachute", "sea shell", "station", "sushi", "vacation"]
            case 2: list = ["cash", "dish", "finish", "leash", "push", "starfish", "trash", "wash"]
            
            case 3: list = ["chain", "chair", "checkers", "cheese", "cheetah", "cherries", "chest", "chick", "chief", "children", "chimney", "chimp", "chipmunk"]
            case 4: list = ["archer", "ketchup", "kitchen", "nachos", "pitcher", "teacher", "temperature", "wheelchair"]
            case 5: list = ["beach", "bench", "catch", "couch", "lunch", "match", "peach", "reach", "sandwich", "watch", "witch", "wrench"]
            case 6: list = ["giant", "giraffe", "jam", "jar", "jeep", "jet", "jog", "juggle", "juice", "jump"]
            case 7: list = ["angel", "badger", "banjo", "detergent", "engine", "magic", "pajamas", "pigeon"]
            case 8: list = ["badge", "bridge", "cabbage", "cage", "fridge", "fudge", "orange", "page", "sausage", "sponge"]
            default: fatalError()
                
            }
            if UserDefaults.standard.value(forKey: "\(i)") as? Bool ?? true {
                addlist(list:list)
            }
        }
        itemList.shuffle()
        
        let shuffledList = itemList[0..<8]
        
        newItemList.append(contentsOf: shuffledList)
        newItemList.append(contentsOf: shuffledList)
        newItemList.shuffle()
        
    }
    
    @IBAction func playAgain(_ sender: Any) {
   emitter.removeFromSuperlayer()
   self.view.setNeedsDisplay()
    loadCards()
    homeAndXbutton.isUserInteractionEnabled = true
      
    }
    func home(_ sender: UIButton!){
        self.dismiss(animated: true, completion: {})

      
    }
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let destination = segue.destination as? SecondViewController{
            destination.imageIndex = returnToImage
        }
    }
    
    
    @IBAction func returnButton(_ sender: Any) {
       home(returnButton)
     
      }
   
    
    func cardResetFunction(tapGestureRecognizer: UITapGestureRecognizer){
        var localCount = 0
        for i in 0..<4 {
            for x in 0..<4 {
                if(memoryArray[i][x].cardIsRevealed == true){
                    localCount += 1
                    
                }
            }
        }
        if(localCount == 2){
            for i in 0..<4 {
                for x in 0..<4 {
                    if(memoryArray[i][x].cardIsRevealed==true){
                        UIImageView.transition(with: outletArray[(i*4)+x], duration: 0.3, options: .transitionFlipFromTop, animations: nil, completion: nil)
                        outletArray[(i*4)+x].image = cardBacking()
                        outletArray[(i*4)+x].contentMode = .scaleToFill
                        outletArray[(i*4)+x].isUserInteractionEnabled = true
                        memoryArray[i][x].cardIsRevealed = false
                    }

                }
                
            }
        }
    memoryGameReset.isUserInteractionEnabled = false
   count = 0
    }
    
    
    func match(){
        memoryGameReset.image = universalImage
     memoryGameReset.backgroundColor = UIColor.white
    memoryGameReset.isUserInteractionEnabled = true
    homeAndXbutton.setImage(nil, for: .normal)
    homeAndXbutton.isUserInteractionEnabled = false
       xbutton.addTarget(self, action:#selector(clearCards(_:)), for: .touchUpInside)
    xbutton.isUserInteractionEnabled = true
    xbutton.setImage(#imageLiteral(resourceName: "xbutton"), for: UIControlState.normal)
    
    }
   
    func matchImageTapped(tapGestureRecognizer: UITapGestureRecognizer)
    {
       memoryGameReset.isUserInteractionEnabled = false
 
        let card = newItemList[universalInt]
        card.delegate = self
        card.playSound()
        
    }
    internal func isOn() {
        if(memoryGameReset.image != nil){
            memoryGameReset.isUserInteractionEnabled = true
        }else{
            memoryGameReset.isUserInteractionEnabled = false
        }
    }
 
    func clearCards(_ sender: UIButton!){
        let defaults = UserDefaults.standard
        defaults.set(defaults.integer(forKey: "counter")+1, forKey: "counter")
        if(dissappear == 14){
            if #available(iOS 10.3, *){
                if(UserDefaults.standard.integer(forKey: "counter")<20 && UserDefaults.standard.integer(forKey: "counter")%6==0){
                    SKStoreReviewController.requestReview()
                }
            }
            emitter.emitterPosition = CGPoint(x: self.view.frame.size.height, y: -10)
            emitter.emitterShape = kCAEmitterLayerLine
            emitter.emitterSize = CGSize(width: self.view.frame.size.width + 700, height: 0)
            
            emitter.emitterCells = generateEmitterCells()
           
            self.view.layer.addSublayer(emitter)
            
            playAgain.isHidden = false
            returnButton.isHidden = false
            self.view.bringSubview(toFront: self.buttonStack)
        }
 
        homeAndXbutton.setImage(#imageLiteral(resourceName: "bluehome.png"), for: .normal)
        homeAndXbutton.isUserInteractionEnabled = true
        xbutton.setImage(nil, for: .normal)
        xbutton.isUserInteractionEnabled = false
        memoryGameReset.image = nil
        memoryGameReset.backgroundColor = nil
        memoryGameReset.isUserInteractionEnabled = false
       
        
        for i in 0..<4 {
            for x in 0..<4 {
                memoryArray[i][x].cardIsRevealed = false
                if (memoryArray[i][x].dissapear==true){
                     outletArray[(i*4)+x].image = nil
                outletArray[(i*4)+x].isUserInteractionEnabled = false
                }else if(memoryArray[i][x].dissapear==false){
                    outletArray[(i*4)+x].isUserInteractionEnabled = true
                }
            }
            }
        count = 0;
    dissappear += 2
    }
    
    func memoryGameResetUserInteraction(){
        memoryGameReset.isUserInteractionEnabled = true;
    }
    func setUserInteractionsToFalse(){
        for i in 0..<16{
            outletArray[i].isUserInteractionEnabled = false
        }
    }
    func setUserInteractionsToTrue(){
        for i in 0..<4 {
            for x in 0..<4 {
                if(memoryArray[i][x].dissapear==false){
                    outletArray[(i*4)+x].isUserInteractionEnabled = true
                }else{
                    outletArray[(i*4)+x].isUserInteractionEnabled = false
                }
            }
        }
    }
    
    func winningSound(){
        guard let url = Bundle.main.url(forResource: "twinkle", withExtension: "mp3") else { return }
        
        do {
            try AVAudioSession.sharedInstance().setCategory(AVAudioSessionCategoryPlayback)
            try AVAudioSession.sharedInstance().setActive(true)
            
            player = try AVAudioPlayer(contentsOf: url)
            guard let player = player else { return }
            
            player.play()
            
        } catch let error {
            print(error.localizedDescription)
        }
    }
    
    private func generateEmitterCells() -> [CAEmitterCell] {
        var cells:[CAEmitterCell] = [CAEmitterCell]()
        for index in 0..<16 {
            
            let cell = CAEmitterCell()
            
            cell.birthRate = 4.0
            cell.lifetime = 14.0
            cell.lifetimeRange = 0
            cell.velocity = CGFloat(getRandomVelocity())
            cell.velocityRange = 0
            cell.emissionLongitude = CGFloat(Double.pi)
            cell.emissionRange = 0.5
            cell.spin = 3.5
            cell.spinRange = 0
            cell.color = getNextColor(i: index)
            cell.contents = getNextImage(i: index)
            cell.scaleRange = 0.25
            cell.scale = 0.1
            
            cells.append(cell)
            
        }
        
        return cells
        
    }
    private func getRandomVelocity() -> Int {
        return velocities[getRandomNumber()]
    }
    
    private func getRandomNumber() -> Int {
        return Int(arc4random_uniform(4))
    }
    
    private func getNextColor(i:Int) -> CGColor {
        if i <= 4 {
            return colors[0].cgColor
        } else if i <= 8 {
            return colors[1].cgColor
        } else if i <= 12 {
            return colors[2].cgColor
        } else {
            return colors[3].cgColor
        }
    }
    
    private func getNextImage(i:Int) -> CGImage {
        return images[i % 4].cgImage!
    }

    
    func imageTapped(tapGestureRecognizer: UITapGestureRecognizer)
    {
    UIImageView.transition(with: R1C1, duration: 0.25, options: .transitionFlipFromTop, animations: nil, completion: nil)
    let imagePath = Bundle.main.path(forResource: newItemList[0].image, ofType: "png")
    R1C1.image = UIImage(contentsOfFile: imagePath!)
    memoryArray[0][0].cardIsRevealed = true
    memoryArray[0][0].sound = newItemList[0].image
    R1C1.contentMode = .scaleAspectFit
    count += 1
    R1C1.isUserInteractionEnabled = false
      
        if(count==1){
            sstring = memoryArray[0][0].sound
        }
        if(count==2){
            if(sstring == memoryArray[0][0].sound){
                twoCardsRevealed()
            }
            if(sstring != memoryArray[0][0].sound){
                didNotMatch()
            }
        }
    }
   func imageTapped2(tapGestureRecognizer: UITapGestureRecognizer)
    {
        UIImageView.transition(with: R1C2, duration: 0.25, options: .transitionFlipFromTop, animations: nil, completion: nil)
        let imagePath = Bundle.main.path(forResource: newItemList[1].image, ofType: "png")
        R1C2.image = UIImage(contentsOfFile: imagePath!)
        memoryArray[0][1].cardIsRevealed = true
        memoryArray[0][1].sound = newItemList[1].image
        R1C2.contentMode = .scaleAspectFit
        count += 1
        R1C2.isUserInteractionEnabled = false
        if(count==1){
            sstring = memoryArray[0][1].sound
        }
        if(count==2){
            if(sstring == memoryArray[0][1].sound){
                twoCardsRevealed()
            }
            if(sstring != memoryArray[0][1].sound){
                didNotMatch()
            }
        }
    }
    func imageTapped3(tapGestureRecognizer: UITapGestureRecognizer)
    {
        UIImageView.transition(with: R1C3, duration: 0.25, options: .transitionFlipFromTop, animations: nil, completion: nil)
        let imagePath = Bundle.main.path(forResource: newItemList[2].image, ofType: "png")
        R1C3.image = UIImage(contentsOfFile: imagePath!)
        memoryArray[0][2].cardIsRevealed = true
        memoryArray[0][2].sound = newItemList[2].image
        R1C3.contentMode = .scaleAspectFit
        count += 1
        R1C3.isUserInteractionEnabled = false
        if(count==1){
            sstring = memoryArray[0][2].sound
        }
        if(count==2){
            if(sstring == memoryArray[0][2].sound){
                twoCardsRevealed()
            }
            if(sstring != memoryArray[0][2].sound){
                didNotMatch()
            }
        }
    }
    func imageTapped4(tapGestureRecognizer: UITapGestureRecognizer)
    {
         UIImageView.transition(with: R1C4, duration: 0.25, options: .transitionFlipFromTop, animations: nil, completion: nil)
        let imagePath = Bundle.main.path(forResource: newItemList[3].image, ofType: "png")
        R1C4.image = UIImage(contentsOfFile: imagePath!)
        R1C4.contentMode = .scaleAspectFit
        memoryArray[0][3].cardIsRevealed = true
        memoryArray[0][3].sound = newItemList[3].image
        count += 1
        R1C4.isUserInteractionEnabled = false
        if(count==1){
            sstring = memoryArray[0][3].sound
        }
        if(count==2){
            if(sstring == memoryArray[0][3].sound){
                twoCardsRevealed()
            }
            if(sstring != memoryArray[0][3].sound){
                didNotMatch()
            }
        }
    }
    func imageTapped5(tapGestureRecognizer: UITapGestureRecognizer)
    {
        UIImageView.transition(with: R2C1, duration: 0.25, options: .transitionFlipFromTop, animations: nil, completion: nil)
        let imagePath = Bundle.main.path(forResource: newItemList[4].image, ofType: "png")
        R2C1.image = UIImage(contentsOfFile: imagePath!)
        R2C1.contentMode = .scaleAspectFit
        memoryArray[1][0].cardIsRevealed = true
        memoryArray[1][0].sound = newItemList[4].image
        count += 1
        R2C1.isUserInteractionEnabled = false
        if(count==1){
            sstring = memoryArray[1][0].sound
        }
        if(count==2){
            if(sstring == memoryArray[1][0].sound){
                twoCardsRevealed()
            }
            if(sstring != memoryArray[1][0].sound){
                didNotMatch()
            }
        }
    }
    func imageTapped6(tapGestureRecognizer: UITapGestureRecognizer)
    {
        UIImageView.transition(with: R2C2, duration: 0.25, options: .transitionFlipFromTop, animations: nil, completion: nil)
        let imagePath = Bundle.main.path(forResource: newItemList[5].image, ofType: "png")
        R2C2.image = UIImage(contentsOfFile: imagePath!)
        R2C2.contentMode = .scaleAspectFit
        memoryArray[1][1].cardIsRevealed = true
        memoryArray[1][1].sound = newItemList[5].image
        count += 1
        R2C2.isUserInteractionEnabled = false
        if(count==1){
            sstring = memoryArray[1][1].sound
        }
        if(count==2){
            if(sstring == memoryArray[1][1].sound){
                twoCardsRevealed()
            }
            if(sstring != memoryArray[1][1].sound){
                didNotMatch()
            }
        }
    }
    func imageTapped7(tapGestureRecognizer: UITapGestureRecognizer)
    {
        UIImageView.transition(with: R2C3, duration: 0.25, options: .transitionFlipFromTop, animations: nil, completion: nil)
        let imagePath = Bundle.main.path(forResource: newItemList[6].image, ofType: "png")
        R2C3.image = UIImage(contentsOfFile: imagePath!)
        R2C3.contentMode = .scaleAspectFit
        memoryArray[1][2].cardIsRevealed = true
        memoryArray[1][2].sound = newItemList[6].image
        count += 1
        R2C3.isUserInteractionEnabled = false
        if(count==1){
            sstring = memoryArray[1][2].sound
        }
        if(count==2){
            if(sstring == memoryArray[1][2].sound){
                twoCardsRevealed()
            }
            if(sstring != memoryArray[1][2].sound){
                didNotMatch()
            }
        }
    }
    func imageTapped8(tapGestureRecognizer: UITapGestureRecognizer)
    {
        UIImageView.transition(with: R2C4, duration: 0.25, options: .transitionFlipFromTop, animations: nil, completion: nil)
        let imagePath = Bundle.main.path(forResource: newItemList[7].image, ofType: "png")
        R2C4.image = UIImage(contentsOfFile: imagePath!)
        R2C4.contentMode = .scaleAspectFit
        memoryArray[1][3].cardIsRevealed = true
        memoryArray[1][3].sound = newItemList[7].image
        count += 1
        R2C4.isUserInteractionEnabled = false
        if(count==1){
            sstring = memoryArray[1][3].sound
        }
        if(count==2){
            if(sstring == memoryArray[1][3].sound){
                twoCardsRevealed()
            }
            if(sstring != memoryArray[1][3].sound){
                didNotMatch()
            }
        }
    }
    func imageTapped9(tapGestureRecognizer: UITapGestureRecognizer)
    {
        UIImageView.transition(with: R3C1, duration: 0.25, options: .transitionFlipFromTop, animations: nil, completion: nil)
        let imagePath = Bundle.main.path(forResource: newItemList[8].image, ofType: "png")
        R3C1.image = UIImage(contentsOfFile: imagePath!)
        R3C1.contentMode = .scaleAspectFit
        memoryArray[2][0].cardIsRevealed = true
        memoryArray[2][0].sound = newItemList[8].image
        count += 1
        R3C1.isUserInteractionEnabled = false
        if(count==1){
            sstring = memoryArray[2][0].sound
        }
        if(count==2){
            if(sstring == memoryArray[2][0].sound){
                twoCardsRevealed()
            }
            if(sstring != memoryArray[2][0].sound){
                didNotMatch()
            }
        }
    }
    func imageTapped10(tapGestureRecognizer: UITapGestureRecognizer)
    {
        UIImageView.transition(with: R3C2, duration: 0.25, options: .transitionFlipFromTop, animations: nil, completion: nil)
        let imagePath = Bundle.main.path(forResource: newItemList[9].image, ofType: "png")
        R3C2.image = UIImage(contentsOfFile: imagePath!)
        R3C2.contentMode = .scaleAspectFit
        memoryArray[2][1].cardIsRevealed = true
        memoryArray[2][1].sound = newItemList[9].image
        count += 1
        R3C2.isUserInteractionEnabled = false
        if(count==1){
            sstring = memoryArray[2][1].sound
        }
        if(count==2){
            if(sstring == memoryArray[2][1].sound){
                twoCardsRevealed()
            }
            if(sstring != memoryArray[2][1].sound){
                didNotMatch()
            }
        }
    }
    func imageTapped11(tapGestureRecognizer: UITapGestureRecognizer)
    {
        UIImageView.transition(with: R3C3, duration: 0.25, options: .transitionFlipFromTop, animations: nil, completion: nil)
        let imagePath = Bundle.main.path(forResource: newItemList[10].image, ofType: "png")
        R3C3.image = UIImage(contentsOfFile: imagePath!)
        R3C3.contentMode = .scaleAspectFit
        memoryArray[2][2].cardIsRevealed = true
        memoryArray[2][2].sound = newItemList[10].image
        count += 1
        R3C3.isUserInteractionEnabled = false
        if(count==1){
            sstring = memoryArray[2][2].sound
        }
        if(count==2){
            if(sstring == memoryArray[2][2].sound){
                twoCardsRevealed()
            }
            if(sstring != memoryArray[2][2].sound){
                didNotMatch()
            }
        }
    }
    func imageTapped12(tapGestureRecognizer: UITapGestureRecognizer)
    {
        UIImageView.transition(with: R3C4, duration: 0.25, options: .transitionFlipFromTop, animations: nil, completion: nil)
        let imagePath = Bundle.main.path(forResource: newItemList[11].image, ofType: "png")
        R3C4.image = UIImage(contentsOfFile: imagePath!)
        R3C4.contentMode = .scaleAspectFit
        memoryArray[2][3].cardIsRevealed = true
        memoryArray[2][3].sound = newItemList[11].image
        count += 1
        R3C4.isUserInteractionEnabled = false
        if(count==1){
            sstring = memoryArray[2][3].sound
        }
        if(count==2){
            if(sstring == memoryArray[2][3].sound){
                twoCardsRevealed()
            }
            if(sstring != memoryArray[2][3].sound){
                didNotMatch()
            }
        }
    }
    func imageTapped13(tapGestureRecognizer: UITapGestureRecognizer)
    {
        UIImageView.transition(with: R4C1, duration: 0.25, options: .transitionFlipFromTop, animations: nil, completion: nil)
        let imagePath = Bundle.main.path(forResource: newItemList[12].image, ofType: "png")
        R4C1.image = UIImage(contentsOfFile: imagePath!)
        R4C1.contentMode = .scaleAspectFit
        memoryArray[3][0].cardIsRevealed = true
        memoryArray[3][0].sound = newItemList[12].image
        count += 1
        R4C1.isUserInteractionEnabled = false
        if(count==1){
            sstring = memoryArray[3][0].sound
        }
        if(count==2){
            if(sstring == memoryArray[3][0].sound){
                twoCardsRevealed()
            }
            if(sstring != memoryArray[3][0].sound){
                didNotMatch()
            }
        }
    }
    func imageTapped14(tapGestureRecognizer: UITapGestureRecognizer)
    {
        UIImageView.transition(with: R4C2, duration: 0.25, options: .transitionFlipFromTop, animations: nil, completion: nil)
        let imagePath = Bundle.main.path(forResource: newItemList[13].image, ofType: "png")
        R4C2.image = UIImage(contentsOfFile: imagePath!)
        R4C2.contentMode = .scaleAspectFit
        memoryArray[3][1].cardIsRevealed = true
       memoryArray[3][1].sound = newItemList[13].image
        count += 1
        R4C2.isUserInteractionEnabled = false
        if(count==1){
            sstring = memoryArray[3][1].sound
        }
        if(count==2){
            if(sstring == memoryArray[3][1].sound){
                twoCardsRevealed()
            }
            if(sstring != memoryArray[3][1].sound){
                didNotMatch()
            }
        }
    }
    func imageTapped15(tapGestureRecognizer: UITapGestureRecognizer)
    {
        UIImageView.transition(with: R4C3, duration: 0.25, options: .transitionFlipFromTop, animations: nil, completion: nil)
        let imagePath = Bundle.main.path(forResource: newItemList[14].image, ofType: "png")
        R4C3.image = UIImage(contentsOfFile: imagePath!)
        R4C3.contentMode = .scaleAspectFit
        memoryArray[3][2].cardIsRevealed = true
        memoryArray[3][2].sound = newItemList[14].image
        count += 1
        R4C3.isUserInteractionEnabled = false
        if(count==1){
            sstring = memoryArray[3][2].sound
        }
        if(count==2){
            if(sstring == memoryArray[3][2].sound){
                twoCardsRevealed()
            }
            if(sstring != memoryArray[3][2].sound){
                didNotMatch()
            }
        }
    }
    func imageTapped16(tapGestureRecognizer: UITapGestureRecognizer)
    {
        UIImageView.transition(with: R4C4, duration: 0.25, options: .transitionFlipFromTop, animations: nil, completion: nil)
        let imagePath = Bundle.main.path(forResource: newItemList[15].image, ofType: "png")
        R4C4.image = UIImage(contentsOfFile: imagePath!)
        R4C4.contentMode = .scaleAspectFit
        memoryArray[3][3].cardIsRevealed = true
        memoryArray[3][3].sound = newItemList[15].image
        count += 1
        R4C4.isUserInteractionEnabled = false
        if(count==1){
            sstring = memoryArray[3][3].sound
        }
        if(count==2){
            if(sstring == memoryArray[3][3].sound){
            twoCardsRevealed()
            }
            if(sstring != memoryArray[3][3].sound){
            didNotMatch()
            }
        }
    }

    func twoCardsRevealed() {

                for i in 0..<4 {
                    for x in 0..<4 {
                        if(memoryArray[i][x].cardIsRevealed==true){
                            winningSound()
                            outletArray[(i*4)+x].shake()
                            setUserInteractionsToFalse()
                            homeAndXbutton.isUserInteractionEnabled = false
                            memoryArray[i][x].dissapear = true
                            let imagePath = Bundle.main.path(forResource: newItemList[(i*4)+x].image, ofType: "png")
                                universalImage = UIImage(contentsOfFile: imagePath!)!
                            universalInt = ((i*4)+x)
                            
                        }
                        
                    }
                }
                Timer.scheduledTimer(timeInterval: 2.0, target: self, selector: #selector(match), userInfo: nil, repeats: false)
                let matchPictureGestureRecognizer = UITapGestureRecognizer(target: self, action:
                    #selector(matchImageTapped(tapGestureRecognizer:)))
                memoryGameReset.addGestureRecognizer(matchPictureGestureRecognizer)
        }
    
    func didNotMatch(){
       memoryGameReset.isUserInteractionEnabled = true
            let resetGestureRecognizer = UITapGestureRecognizer(target: self, action: #selector(cardResetFunction(tapGestureRecognizer:)))
            memoryGameReset.addGestureRecognizer(resetGestureRecognizer)

    }

}
extension MutableCollection {
    /// Shuffle the elements of `self` in-place.
    mutating func shuffle() {
        // empty and single-element collections don't shuffle
        if count < 2 { return }
        
        for i in indices.dropLast() {
            let diff = distance(from: i, to: endIndex)
            let j = index(i, offsetBy: numericCast(arc4random_uniform(numericCast(diff))))
            swapAt(i, j)
        }
    }
}
public extension UIView {
    
    func shake(count : Float = 4,for duration : TimeInterval = 0.5,withTranslation translation : Float = -5) {
        
        let animation : CABasicAnimation = CABasicAnimation(keyPath: "transform.translation.y")
        animation.timingFunction = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
        animation.repeatCount = count
        animation.duration = duration/TimeInterval(animation.repeatCount)
        animation.autoreverses = true
        animation.byValue = translation
        layer.add(animation, forKey: "shake")
    }
}
